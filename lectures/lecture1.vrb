\frametitle{Implementation Example: State-Space Model}
\begin{lstlisting}[language=Python]
import numpy as np
from scipy.stats import multivariate_normal

class LinearStateSpaceModel:
    def __init__(self, A, B, C, Q, R):
        self.A = A  # State transition matrix
        self.B = B  # Input matrix
        self.C = C  # Measurement matrix
        self.Q = Q  # Process noise covariance
        self.R = R  # Measurement noise covariance

    def propagate_state(self, x, u=None):
        """Propagate state forward one step."""
        w = multivariate_normal.rvs(mean=np.zeros(x.shape), cov=self.Q)
        if u is not None:
            return self.A @ x + self.B @ u + w
        return self.A @ x + w

    def get_measurement(self, x):
        """Get noisy measurement of current state."""
        v = multivariate_normal.rvs(mean=np.zeros(self.C.shape[0]), cov=self.R)
        return self.C @ x + v
\end{lstlisting}
